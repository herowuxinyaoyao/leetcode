145. 二叉树的后序遍历
给定一个二叉树，返回它的 后序 遍历。

示例:

输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [3,2,1]
解法1 ： 递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int>res;
    vector<int> postorderTraversal(TreeNode* root) {
        Traversal(root);
        return res;
        
    }
    void Traversal(TreeNode* root){
        if(root == nullptr)
            return;
        
        Traversal(root->left);
        Traversal(root->right);
        res.push_back(root->val);
    }
    
};
解法2：非递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*>s{{root}};
        stack<TreeNode*>ss;
        if(root){
            while (!s.empty()) {//后续遍历为左右根，先排好根又左，push到另外一个栈中，就可以完成逆序
                TreeNode *t = s.top(); s.pop();
                ss.push(t);//这里不打印，存储到一个栈中完成逆序
                if (t->left) //这里和前序遍历的区别是先压左边，再压右边
                    s.push(t->left);
                if (t->right) 
                    s.push(t->right);
            } 
        }
       while(!ss.empty()){
            TreeNode *t = ss.top(); 
            ss.pop();
            res.push_back(t->val);
        }
        return res;
    }
};
