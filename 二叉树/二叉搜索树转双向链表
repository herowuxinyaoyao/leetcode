#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int n;
int num = 0;
struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
};
void funn(TreeNode* root, TreeNode* &last);
void insert_value(TreeNode* &root, int val) {
	if (!root) {
		root = new TreeNode;
		root->val = val;
		root->left = root->right = nullptr;
		return;
	}
	else {
		if (val < root->val) {
			insert_value(root->left, val);

		}
		else {
			insert_value(root->right, val);
		}
	}
}
TreeNode* fun(TreeNode* root) {
	if (!root)
		return root;
	TreeNode* last = nullptr;
	funn(root, last);
	while (last->left)
		last = last->left;
	return last;
}
void funn(TreeNode* root, TreeNode* &last) {
	if (root->left)
		funn(root->left, last);
	root->left = last;
	if (last)
		last->right = root;
	last = root;
	if (root->right)
		funn(root->right, last);
}
void print(TreeNode* root) {
	if (!root)
		return;
	TreeNode* p = root;
	
	while (p->right) {
		cout << p->val << " ";
		p = p->right;
	}
	while (p->left) {
		cout << p->val << " ";
		p = p->left;
	}
	cout << endl;
}
void LevelOrder(TreeNode* root) {
	queue<TreeNode*> q;
	q.push(root);
	while (!q.empty()) {
		TreeNode* now = q.front();
		q.pop();
		printf("%d", now->val);
		num++;
		if (num < n) {
			printf(" ");
		}
		if (now->left != NULL)
			q.push(now->left);
		if (now->right != NULL)
			q.push(now->right);
	}
}
int main() {
	
	cin >> n;
	TreeNode* treenode = nullptr;
	for (int i = 0; i < n; i++) {
		int tmp;
		cin >> tmp;
		insert_value(treenode, tmp);
	}
	LevelOrder(treenode);
	TreeNode* node = fun(treenode);
	
	print(node);
	system("pause");
	return 0;
}
