347. 前K个高频元素

给定一个非空的整数数组，返回其中出现频率前 k 高的元素。
示例 1:
输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:
输入: nums = [1], k = 1
输出: [1]

第一种解法：

#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <functional>
using namespace std;

vector<int> topKFrequent(vector<int>& nums, int k) {
	unordered_map<int, int> m;
	priority_queue<pair<int, int>> q;//大根堆
	//priority_queue<pair<int, int>,vector<pair<int,int>>,greater<pair<int,int>>> q;//小根堆
	vector<int> res;
	for (auto a : nums) 
		++m[a];
	for (auto it : m) {
		q.push({ it.second, it.first });
		
	}
		
	for (int i = 0; i < k; ++i) {
		res.push_back(q.top().second); q.pop();
	}
	//输出队列为：（4,4）（3,1）（2,7）（2,3）
	/*while (!q.empty()) {
		cout << "输出队列为：" << q.top().first << " " << q.top().second;
		q.pop();
	}*/
	return res;
}
int main() {
	vector<int> a = { 1,1,1,7,7,3,3,4,4,4,4 };
	vector<int>res = topKFrequent(a, 2);
	for (int i = 0; i < res.size(); i++)
		cout << res[i] << " ";
	cout << endl;
	system("pause");
	return 0;
}


第二种解法：桶排序

#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <functional>
using namespace std;

vector<int> topKFrequent(vector<int>& nums, int k) {
	unordered_map<int, int> m;
	vector<vector<int>> bucket(nums.size() + 1);
	vector<int> res;
	for (auto a : nums) ++m[a];
	for (auto it : m) {
		bucket[it.second].push_back(it.first);
	}
	for (int i = nums.size(); i >= 0; --i) {
		for (int j = 0; j < bucket[i].size(); ++j) {
			//cout << bucket[i][j] << " ";
			res.push_back(bucket[i][j]);
			if (res.size() == k) return res;
		}
	}
	return res;
}
int main() {
	vector<int> a = { 1,1,1,7,7,3,3,4,4,4,4 };
	vector<int>res = topKFrequent(a, 2);
	for (int i = 0; i < res.size(); i++)
		cout << res[i] << " ";
	cout << endl;
	system("pause");
	return 0;
}



