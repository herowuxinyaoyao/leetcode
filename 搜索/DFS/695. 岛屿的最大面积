695. 岛屿的最大面积
给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)
示例 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。
示例 2:
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。
注意: 给定的矩阵grid 的长度和宽度都不超过 50。

class Solution {
public:
    int m,n;
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        if(grid.size() == 0)
            return 0;
        m = grid.size(), n = grid[0].size();
        int maxarea = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                maxarea = max(maxarea,dfs(grid,i,j));
            }
        }
        return maxarea;
    }
    int dfs(vector<vector<int>>& grid,int i, int j){
        int directions[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0)
            return 0;
        grid[i][j] = 0;
        int area = 1;
        for(auto d : directions){
            area += dfs(grid,i + d[0], j + d[1]);
        }
        return area;
    }
};
