快速排序
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

第一种解法：

class Solution {
public:
    int minNumberInRotateArray(vector<int> rotateArray) {
        quick_sort(rotateArray,0,rotateArray.size()-1);
        return rotateArray[0];
        
    }
    void quick_sort(vector<int>& rotateArray,int l,int r){
        if(l < r){
            int i = l;
            int j = r;
            int x = rotateArray[l];
            while(i < j){
                while(i < j && rotateArray[j] > x)
                    j--;
                if(i < j )
                    rotateArray[i++] = rotateArray[j];
                 while(i < j && rotateArray[i] < x)
                    i++;
                if(i < j)
                    rotateArray[j--] = rotateArray[i];
            }
            rotateArray[i] = x;
            quick_sort(rotateArray,l,i-1);
            quick_sort(rotateArray,i+1,r);
            
        }
    }
};

第二种解法：

#include <iostream>
#include <vector>
#include <string>
using namespace std;
vector<int> partition(vector<int>& rotateArray, int l, int r);
void quick_sort(vector<int>& rotateArray, int l, int r) {

	if (l < r) {
		vector<int> res = partition(rotateArray, l, r);
			
		quick_sort(rotateArray, l, res[0] - 1);
		quick_sort(rotateArray, res[1] + 1, r);
	}

}

vector<int> partition(vector<int>& rotateArray, int l, int r) {
	vector<int>t;
	int less = l - 1;
	int more = r;
	while (l < more) {
		if (rotateArray[l] < rotateArray[r])//如果当前值小于num,当前值与less指针的下一个值交换，cur++,less++
			swap(rotateArray[++less], rotateArray[l++]);
		else if (rotateArray[l] > rotateArray[r])//如果当前值大于num,当前值与more指针的前一个值交换，cur不变，more--
			swap(rotateArray[--more], rotateArray[l]);//如果当前值等于num,cur++
		else
			l++;
	}

	swap(rotateArray[more], rotateArray[r]);//将more和r交换值
	//for (int i = l; i <= r; i++)
		//cout << rotateArray[i] << " ";
	//cout << endl;
	t.push_back(less + 1);
	t.push_back(more);
	return t;

}
int main() {
	
	vector<int>a{ 6,3,2,9,4,0 };
	int n = a.size();
	cout << "排序前的数组：" << endl;
	for (int i = 0; i < n; i++)
		cout << a[i] << " ";
	cout << endl;
	quick_sort(a, 0, n - 1);
	cout << "排序后的数组：" << endl;
	for (int i = 0; i < n; i++)
		cout << a[i] << " ";
	system("pause");
	return 0;
}
