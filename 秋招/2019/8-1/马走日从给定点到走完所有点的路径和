#include <iostream>
#include <vector>
using namespace std;
int ans = 0;
int n, m, x, y, cnt;
const int N = 11;
vector<vector<int>>flag(N,vector<int>(N,0));
int direction[8][2] = { {1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1} };
void dfs(int x, int y, int step) {
	if (step == cnt) {
		ans++;
		return;
	}
	for (int i = 0; i < 8;i++) {
		int xx = x + direction[i][0];
		int yy = y + direction[i][1];
		if (xx < 0 || xx >= n || yy < 0 || yy >= m || flag[xx][yy] == 1)
			continue;
		flag[xx][yy] = 1;
		dfs(xx, yy, step + 1);
		flag[xx][yy] = 0;
	}
}
int main() {
	int t;//测试用例组数
	cin >> t;
	while (t--) {
		cin >> n >> m >> x >> y;
		cnt = n * m;
		ans = 0;
		flag[0][0] = 1;
		dfs(x, y, 1);
		cout << ans << endl;
	}
	system("pause");
	return 0;

}
