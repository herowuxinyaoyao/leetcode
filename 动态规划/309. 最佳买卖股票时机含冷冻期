309. 最佳买卖股票时机含冷冻期

给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:
输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

首先是当天未持有股票状态dp1，当天未持有股票的话，则分为两种情况：昨天也未持有，或者昨天持有股票，今天卖出。由此得出状态转移方程：

dp1[i] = max(dp1[i - 1], dp2[i - 1]+price[i])

然后是当天持有股票状态dp2，当天持有股票的话，则分为两种情况，一是昨天持有股票，今天未卖；二是昨天未持有股票，今天买入。

 注意第二种情况，由于存在冷冻期，今天买入则今天一定没有在冷冻期，要确定今天没有在冷冻期，则昨天不能卖出股票，也未持有股票。dp1[i-1] 只能表示昨天没有持有股票，不能表示昨天没有卖出股票，所以要根据前天的状态来确定今天不在冷冻期。

若前天未持有股票的话，则今天一定不再冷冻期。由此可得状态转移方程

dp2[i] = max(dp2[i - 1], dp1[i - 2] - price[i])

同样的由于冷冻期的存在，则若在第一天，第二天（i =1和i=2）时，当天持有股票的利润一定是 0 - price[i]，因为之前的时间不足以购买股票

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n < 2)
            return 0;
        int dp1[n];//第i天不持有股票的最大利润
        int dp2[n];//第i天持有股票的最大利润
        dp1[0] = 0;
        dp2[0] = -prices[0];
        for(int i = 1; i < n; i++){
            dp1[i] = max(dp1[i - 1], dp2[i - 1] + prices[i]);
            int temp = 0;
            if(i >= 2)
                temp = dp1[i - 2] ;
            
            dp2[i] = max(dp2[i - 1], temp - prices[i]);

        }
        return max(dp1[n-1],dp2[n-1]);
    }
};
