123. 买卖股票的最佳时机 III

给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:
输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

public int maxProfit(int[] prices) {
        return f(prices, 0, 0, 0);
    }

    /**
     *
     * @param prices
     * @param i 当前考虑第几天
     * @param hasStock 是否有股票在手
     * @param counts 已经交易的次数（每买一次股票就加一）
     * @return
     */
    private int f(int[] prices, int i, int hasStock, int counts) {
        // 如果已经买了两次股票，并且手里已经没有股票了，那么后面的天数不需要考虑
        if(i >= prices.length || (counts >= 2 && hasStock < 1))
            return 0;
        // 如果手里有股票，我可以选择卖或者不卖
        if(hasStock > 0)
            return  Math.max(prices[i] + f(prices, i+1, 0, counts), f(prices, i+1, 1, counts));
        // 如果没有股票，我可以选择买或者不买
        return Math.max(-prices[i] + f(prices, i+1, 1, counts+1), f(prices, i+1, 0, counts));
    }
    
    
  /**
     *
     * @param prices
     * @param i 当前考虑第几天
     * @param j 是否有股票在手
     * @param k 已经交易的次数（每买一次股票就加一）
     * @return
     */  
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int m = prices.size();
        int dp[m+1][2][3] = {0,0,0};
        for(int i = m-1; i >= 0; i--) {
            for(int j = 1; j >= 0; j--) {
                for(int k = 2; k >= 0; k--) {
                    if(k == 2 && j == 0)
                        continue;
                    if(j > 0)
                        dp[i][j][k] = max(prices[i] + dp[i+1][0][k],dp[i+1][1][k]);
                    else
                        dp[i][j][k] = max(-prices[i] + dp[i+1][1][k+1],dp[i+1][0][k]);
                }
            }
        }
        return dp[0][0][0];
    }
};
