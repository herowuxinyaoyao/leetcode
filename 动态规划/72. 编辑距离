72. 编辑距离

给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。
你可以对一个单词进行如下三种操作：
插入一个字符
删除一个字符
替换一个字符
示例 1:
输入: word1 = "horse", word2 = "ros"
输出: 3
解释: 
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')
示例 2:
输入: word1 = "intention", word2 = "execution"
输出: 5
解释: 
intention -> inention (删除 't')
inention -> enention (将 'i' 替换为 'e')
enention -> exention (将 'n' 替换为 'x')
exention -> exection (将 'n' 替换为 'c')
exection -> execution (插入 'u')


//对于(i-1,j-1)时，d(i-1, j-1)表示完成从A[0,i-1]到B[0,j-1]的编辑次数，即现在A[0,i-1]=B[0,j-1]，对于(i,j)，
我们直接把A[i]替换成B[j]即完成编辑。因此(i-1,j-1)对应于把A[i]用B[j]替换的一次操作
对于(i-1, j)时，d(i-1, j)表示完成从A[0, i-1]到B[0, j]的编辑次数，即现在A[0,i-1]=B[0,j]，对于(i,j)，
我们直接把A[i]删除即可完成编辑，因此(i-1,j)对应于把A[i]删除的一次操作
对于(i, j-1)时，d(i, j-1)表示完成从A[0, i]到B[0, j-1]的编辑次数，即现在A[0,i]=B[0,j-1]，对于(i,j)，
我们直接用B[j]插入到A[i]的位置即可完成编辑，因此(i,j-1)对应于把B[j]插到A[i]的一次操作



class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        for (int i = 0; i <= m; ++i) dp[i][0] = i;
        for (int i = 0; i <= n; ++i) dp[0][i] = i;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                }
            }
        }
        return dp[m][n];
    }
};
